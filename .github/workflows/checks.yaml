name: checks

permissions:
  contents: read

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches-ignore:
      - 'release/**'
  schedule:
    - cron: '0 4 * * *'
  merge_group:
    branches:
      - main

jobs:
  build:
    name: Build and test
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            features: ""
            target: "x86_64-unknown-linux-gnu"
          # FIXME: ubuntu-22.04-arm, ubuntu-24.04-arm and windows-11-arm are not supported yet for private repositories
          # - rust: stable
          #   os: ubuntu-24.04-arm
          #   features: ""
          #   target: "aarch64-unknown-linux-gnu"
          - rust: stable
            os: macos-latest
            features: ""
            target: "aarch64-apple-darwin"
            # - rust: msrv
            #   os: ubuntu-latest
            #   features: ""
            #   target: "x86_64-unknown-linux-gnu"
            # - rust: beta
            #   os: ubuntu-latest
            #   features: ""
            #   target: "x86_64-unknown-linux-gnu"
            # - rust: "stable"
            #   os: macos-latest
            #   features: ""
            #   target: "x86_64-apple-darwin"
            # - rust: stable-x86_64-gnu
            #   os: windows-2022
            #   features: ""
            #   target: "x86_64-pc-windows-gnu"
    steps:
      - name: Checkout sources
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9
        with:
          toolchain: nightly
          targets: "${{ matrix.target }}"
      - name: target
        run: "rustc -vV | sed -n 's|host: ||p'"
        if: matrix.os != 'windows-2022'
      - name: Install cargo-llvm-cov & cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb # v2.53.2
        with:
          tool: cargo-llvm-cov,cargo-nextest
      - name: cargo llvm-cov nextest
        if: matrix.os != 'windows-2022'
        run: cargo llvm-cov nextest --target ${{matrix.target}} ${{ matrix.features }} --lcov --output-path lcov.info --ignore-filename-regex "test-" --workspace
        env:
          RUST_BACKTRACE: 1
          RUSTFLAGS: "-Awarnings"
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
      #   if: matrix.os != 'windows-2022' && matrix.rust == 'stable'
      #   with:
      #     files: |
      #       ./lcov.info
      #       ./cdylib.lcov.info
      #     fail_ci_if_error: false
      #     flags: test-${{matrix.target}}
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     name: test
      #     verbose: true

  fuzz-decompress:
    name: fuzz-decompress
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9
        with:
          toolchain: nightly
      - name: Install cargo fuzz
        uses: taiki-e/install-action@56ab7930c591507f833cbaed864d201386d518a8
        with:
          tool: cargo-fuzz
      - name: Download custom decompression corpus
        run: |
          wget https://github.com/trifectatechfoundation/compression-corpus/releases/download/2025-07-30-091654/zstd-files.zip
          unzip zstd-files.zip -d zstd-files
      - name: run the fuzzer
        run: |
          cargo fuzz run decompress zstd-files/compressed -- -max_total_time=10
          cargo fuzz run decompress_overlapping zstd-files/compressed -- -max_total_time=10
        env:
          RUSTFLAGS: "-Awarnings"

  miri:
    name: "Miri"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          persist-credentials: false
          submodules: true
      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          cargo +nightly miri setup
      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb # v2.53.2
        with:
          tool: cargo-nextest
      #      - name: Test public C api with miri
      #        env:
      #          QUICKCHECK_TESTS: 10
      #          RUSTFLAGS: "-Awarnings"
      #        run: |
      #          cargo +nightly miri nextest run -j4 -p test-libzstd-rs-sys
      - name: Run unit tests with miri
        env:
          QUICKCHECK_TESTS: 10
          RUSTFLAGS: "-Awarnings"
        run: |
          cargo +nightly miri nextest run -j4 -p libzstd-rs-sys

  build-qemu:
    name: QEMU build & test
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        include:
          - rust: nightly
            os: ubuntu-latest
            features: ""
            target: "s390x-unknown-linux-gnu"
            gcc: "s390x-linux-gnu-gcc"
            runner: "qemu-s390x -L /usr/s390x-linux-gnu"
          - rust: nightly
            os: ubuntu-latest
            features: ""
            target: "i686-unknown-linux-gnu"
            gcc: "i686-linux-gnu-gcc"
    steps:
      - name: Checkout sources
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false
          submodules: true
      - uses: awalsh128/cache-apt-pkgs-action@cbdbab28e6327bb5eb4261494f676f9695c29e8b
        with:
          packages: qemu-user qemu-user-static qemu-system-s390x gcc-s390x-linux-gnu gcc-i686-linux-gnu g++-s390x-linux-gnu
          version: 2
      # - name: Install system packages
      #   run: sudo apt install qemu-user qemu-user-static qemu-system-s390x gcc-s390x-linux-gnu gcc-i686-linux-gnu g++-s390x-linux-gnu
      - name: Print compiler versions
        run: |
          i686-linux-gnu-gcc --version
          s390x-linux-gnu-gcc --version
      - name: Copy QEMU Cargo Config
        run: |
          mkdir -p .cargo
          cp qemu-cargo-config.toml .cargo/config.toml
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: "${{ matrix.rust }}"
          targets: "${{ matrix.target }}"
      - name: target
        run: "rustc -vV | sed -n 's|host: ||p'"
      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb # v2.53.2
        with:
          tool: cargo-nextest
      - name: cargo build
        run: cargo build --target ${{matrix.target}} ${{ matrix.features }}
      - name: cargo nextest # reports segfaults in a helpful way
        run: RUNNER="${{ matrix.runner }}" cargo nextest run --target ${{matrix.target}} ${{ matrix.features }}
        env:
          RUSTFLAGS: "-Awarnings"
          RUST_BACKTRACE: 1
          CC: ${{matrix.gcc}}
